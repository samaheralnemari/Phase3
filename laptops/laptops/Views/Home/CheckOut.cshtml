@model laptops.Models.OrderDetails
<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="/docs/4.0/assets/img/favicons/favicon.ico">

    <title>Checkout example for Bootstrap</title>

    <link rel="canonical" href="https://getbootstrap.com/docs/4.0/examples/checkout/">

    <!-- Bootstrap core CSS -->
    <link href="../../dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom styles for this template -->
    <link href="form-validation.css" rel="stylesheet">
</head>

<body class="bg-light">
    @using (Html.BeginForm("CheckOut", "Home", FormMethod.Post))
    {
        <div class="container">
            @*<div class="py-5 text-center">
                <img class="d-block mx-auto mb-4" src="https://getbootstrap.com/docs/4.0/assets/brand/bootstrap-solid.svg" alt="" width="72" height="72">
                <h2>Checkout form</h2>
                <p class="lead">Below is an example form built entirely with Bootstrap's form controls. Each required form group has a validation state that can be triggered by attempting to submit the form without completing it.</p>
            </div>*@

            <div class="row">
                <div class="col-md-4 order-md-2 mb-4">
                    <h4 class="d-flex justify-content-between align-items-center mb-3">
                        <span class="text-muted">Your cart</span>
                        @*<span class="badge badge-secondary badge-pill">3</span>*@
                    </h4>
                    <ul class="list-group mb-3">
                        @Html.Raw(ViewBag.ProductData)
                        <!--foreach (var item in Model)
            {
                <li class="list-group-item d-flex justify-content-between lh-condensed">
                    <div>
                        <h6 class="my-0">Html.DisplayFor(model => item.ProductName)</h6>
                    </div>
                    <span class="text-muted">Html.DisplayFor(model => item.ProductPrice)</span>
                    @*<button class="btn btn-outline-success" type="button" onclick="removeElemnt();">remove</button>*@
                </li>
                total = +item.ProductPrice;

            }-->
                        <li class="list-group-item d-flex justify-content-between">
                            <span>Total (SR)</span>
                            <strong>@ViewBag.TotalPrice</strong>
                        </li>
                    </ul>
                </div>
                <div class="col-md-8 order-md-1">




                    <h4 class="mb-3">Payment</h4>


                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="cc-name">Name on card</label>
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @style = "width: 260px" } })
                            <small class="text-muted">Full name as displayed on card</small>
                            <div class="invalid-feedback">
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                            </div>

                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="cc-number">Credit card number</label>
                            @Html.EditorFor(model => model.CreditNumber, new { htmlAttributes = new { @class = "form-control", @style = "width: 260px" } })

                        </div>
                        <div class="invalid-feedback">
                            @Html.ValidationMessageFor(model => model.CreditNumber, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="cc-expiration">Expiration</label>
                            @Html.EditorFor(model => model.ExpirationDate, new { htmlAttributes = new { @class = "form-control", @style = "width: 260px" } })
                            <div class="invalid-feedback">
                                @Html.ValidationMessageFor(model => model.ExpirationDate, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="col-md-6 mb-3">
                            <label for="cc-expiration">CVV</label>
                            @Html.EditorFor(model => model.CVV, new { htmlAttributes = new { @class = "form-control", @style = "width: 260px" } })
                            <div class="invalid-feedback">
                                @Html.ValidationMessageFor(model => model.CVV, "", new { @class = "text-danger" })
                            </div>
                    
                    </div>
                </div>
                <hr class="mb-4">
                <input type="submit" value="Continue to checkout" class="btn btn-primary btn-lg btn-block" />
                
                @*</form>*@
            </div>
            </div>
        </div>
    }
        <!-- Bootstrap core JavaScript
        ================================================== -->
        <!-- Placed at the end of the document so the pages load faster -->
        <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
        <script>window.jQuery || document.write('<script src="../../assets/js/vendor/jquery-slim.min.js"><\/script>')</script>
        <script src="../../assets/js/vendor/popper.min.js"></script>
        <script src="../../dist/js/bootstrap.min.js"></script>
        <script src="../../assets/js/vendor/holder.min.js"></script>
        <script>
            // Example starter JavaScript for disabling form submissions if there are invalid fields
            (function () {
                'use strict';

                window.addEventListener('load', function () {
                    // Fetch all the forms we want to apply custom Bootstrap validation styles to
                    var forms = document.getElementsByClassName('needs-validation');

                    // Loop over them and prevent submission
                    var validation = Array.prototype.filter.call(forms, function (form) {
                        form.addEventListener('submit', function (event) {
                            if (form.checkValidity() === false) {
                                event.preventDefault();
                                event.stopPropagation();
                            }
                            form.classList.add('was-validated');
                        }, false);
                    });
                }, false);
            })();
        </script>
    </body>
</html>
